#pragma once

#include "gomoku/core/BoardState.hpp"
#include "gomoku/core/Types.hpp"
#include <vector>

namespace gomoku::capture {

// Compute and apply captures generated by placing a stone of color `who` at
// position `p`. Mutates `state` by removing captured stones. Appends removed
// positions into `removed`. Returns the number of captured pairs.
// If captures are disabled in `rules`, returns 0 and performs no mutation.
int applyCapturesAround(BoardState& state, Pos p, Cell who, const RuleSet& rules, std::vector<Pos>& removed);

// Check if placing move `m` would create at least one XOOX capture pattern.
// Does NOT mutate `state`.
bool wouldCapture(const BoardState& state, Move m) noexcept;

} // namespace gomoku::capture
