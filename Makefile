# Makefile pour le projet Gomoku
# Compilateur et flags
CXX = g++
CXXFLAGS = -std=c++23 -Wall -Wextra -Werror -O2

# D√©tection du syst√®me d'exploitation
UNAME_S := $(shell uname -s)

# Configuration SFML selon le syst√®me
ifeq ($(UNAME_S),Darwin)
    # macOS avec Homebrew
    SFML_DIR = /opt/homebrew
    SFML_INCLUDE = -I$(SFML_DIR)/include
    SFML_LIBS = -L$(SFML_DIR)/lib -lsfml-graphics -lsfml-window -lsfml-system -lsfml-audio
    SFML_RPATH = -Wl,-rpath,$(SFML_DIR)/lib
else
    # Linux (configuration originale)
    SFML_DIR = /home/jgavairo/local
    SFML_INCLUDE = -I$(SFML_DIR)/include
    SFML_LIBS = -L$(SFML_DIR)/lib -lsfml-graphics -lsfml-window -lsfml-system -lsfml-audio
    SFML_RPATH = -Wl,-rpath,$(SFML_DIR)/lib
endif

# Dossiers du projet
SRC_DIR = src
INCLUDE_DIR = include
BUILD_DIR = build
OBJ_DIR = $(BUILD_DIR)/obj

# Nom de l'ex√©cutable
TARGET = Gomoku

# Sources
SRC_FILES = $(wildcard *.cpp) \
            $(wildcard $(SRC_DIR)/*.cpp) \
            $(wildcard $(SRC_DIR)/*/*.cpp) \
            $(wildcard $(SRC_DIR)/*/*/*.cpp)

# Objets
OBJ_FILES = $(SRC_FILES:%.cpp=$(OBJ_DIR)/%.o)

# R√®gles principales
all: $(TARGET)

$(TARGET): $(OBJ_FILES)
	@echo "üîó Linking $(TARGET)..."
	@mkdir -p $(dir $@)
	$(CXX) $(OBJ_FILES) $(SFML_LIBS) $(SFML_RPATH) -o $@
	@echo "‚úÖ $(TARGET) cr√©√© avec succ√®s !"

# R√®gle pour compiler les objets
$(OBJ_DIR)/%.o: %.cpp
	@echo "üî® Compiling $<..."
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) $(SFML_INCLUDE) -I$(INCLUDE_DIR) -c $< -o $@

# R√®gle debug
debug: CXXFLAGS += -g -DDEBUG
debug: $(TARGET)
	@echo "üêõ Version debug cr√©√©e !"

# R√®gle clean
clean:
	@echo "üßπ Nettoyage des fichiers objets..."
	@rm -rf $(BUILD_DIR)
	@echo "‚úÖ Nettoyage termin√© !"

# R√®gle fclean
fclean: clean
	@echo "üóëÔ∏è  Suppression de l'ex√©cutable..."
	@rm -f $(TARGET)
	@echo "‚úÖ Nettoyage complet termin√© !"

# R√®gle re
re: fclean all
	@echo "üîÑ Recompilation compl√®te termin√©e !"

# R√®gle install (optionnelle)
install: $(TARGET)
	@echo "üì¶ Installation de $(TARGET)..."
	@mkdir -p ~/bin
	@cp $(TARGET) ~/bin/
	@echo "‚úÖ $(TARGET) install√© dans ~/bin/"

# R√®gle SFML - Installation de SFML et d√©pendances
SFML:
	@echo "üéÆ V√©rification de SFML..."
	@if [ "$(UNAME_S)" = "Darwin" ]; then \
		echo "üçé Syst√®me macOS d√©tect√©"; \
		if brew list sfml >/dev/null 2>&1; then \
			echo "‚úÖ SFML install√© via Homebrew"; \
			echo "üìö Biblioth√®ques disponibles:"; \
			ls $(SFML_DIR)/lib/libsfml* 2>/dev/null | head -3; \
		else \
			echo "üì¶ Installation de SFML via Homebrew..."; \
			brew install sfml; \
			echo "‚úÖ SFML install√© avec succ√®s !"; \
		fi; \
	else \
		if [ -d "$(SFML_DIR)" ] && [ -f "$(SFML_DIR)/lib/libsfml-graphics.so" ]; then \
			echo "‚úÖ SFML est d√©j√† install√© dans $(SFML_DIR)"; \
			echo "üìö Biblioth√®ques disponibles:"; \
			ls $(SFML_DIR)/lib/libsfml* 2>/dev/null | head -3; \
		else \
			echo "üì¶ SFML non trouv√©, installation en cours..."; \
			if [ -f "./scripts/install_sfml.sh" ]; then \
				./scripts/install_sfml.sh; \
			else \
				echo "‚ùå Script scripts/install_sfml.sh non trouv√© !"; \
			fi; \
		fi; \
	fi
	@echo "üîç V√©rification des d√©pendances..."; \
	make check-deps

# R√®gle uninstall
uninstall:
	@echo "üóëÔ∏è  D√©sinstallation de $(TARGET)..."
	@rm -f ~/bin/$(TARGET)
	@echo "‚úÖ $(TARGET) d√©sinstall√© !"

# R√®gle help
help:
	@echo "üéÆ Makefile pour le projet Gomoku"
	@echo ""
	@echo "üìã R√®gles disponibles :"
	@echo "  all      - Compile le projet (d√©faut)"
	@echo "  debug    - Compile en mode debug"
	@echo "  clean    - Supprime les fichiers objets"
	@echo "  fclean   - Supprime tout (objets + ex√©cutable)"
	@echo "  re       - Recompilation compl√®te"
	@echo "  SFML     - Installe SFML et d√©pendances"
	@echo "  install  - Installe dans ~/bin/"
	@echo "  uninstall- D√©sinstalle de ~/bin/"
	@echo "  help     - Affiche cette aide"
	@echo ""
	@echo "üîß Configuration :"
	@echo "  Syst√®me: $(UNAME_S)"
	@echo "  Compilateur: $(CXX)"
	@echo "  Flags: $(CXXFLAGS)"
	@echo "  SFML: $(SFML_DIR)"

# R√®gle pour v√©rifier les d√©pendances
check-deps:
	@echo "üîç V√©rification des d√©pendances..."
	@echo "Syst√®me: $(UNAME_S)"
	@echo "SFML: $(SFML_DIR)"
	@if [ "$(UNAME_S)" = "Darwin" ]; then \
		if brew list sfml >/dev/null 2>&1; then \
			echo "‚úÖ SFML install√© via Homebrew"; \
			ls $(SFML_DIR)/lib/libsfml* 2>/dev/null | head -3; \
		else \
			echo "‚ùå SFML non install√© via Homebrew"; \
			echo "üí° Ex√©cutez: brew install sfml"; \
		fi; \
	else \
		if [ -d "$(SFML_DIR)" ]; then \
			echo "‚úÖ SFML trouv√© dans $(SFML_DIR)"; \
			ls $(SFML_DIR)/lib/libsfml* 2>/dev/null | head -3; \
		else \
			echo "‚ùå SFML non trouv√© dans $(SFML_DIR)"; \
		fi; \
	fi

# R√®gle pour tester la compilation
test: $(TARGET)
	@echo "üß™ Test de compilation r√©ussi !"
	@echo "Ex√©cutable cr√©√©: $(TARGET)"

# Variables d'environnement pour SFML
export LD_LIBRARY_PATH := $(SFML_DIR)/lib:$(LD_LIBRARY_PATH)

# R√®gle par d√©faut
.PHONY: all debug clean fclean re install uninstall help check-deps test SFML 